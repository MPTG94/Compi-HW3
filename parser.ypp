%{
/* Declarations section */
    #include <iostream>
    #include <stdlib.h>
    #include "Semantics.h"
    #include "hw3_output.hpp"
    using namespace std;
    extern int yylex();
    extern int yylineno;
    int yyerror(const char * message);
%}

/* Rules section */

%nonassoc VOID;
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc IF;
%nonassoc ELSE;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left EQ_NEQ_RELOP;
%nonassoc REL_RELOP;
%left ADD_SUB_BINOP;
%left MUL_DIV_BINOP;
%right NOT;
%nonassoc SWITCH;
%nonassoc CASE;
%nonassoc DEFAULT;
%nonassoc COLON;
%left RBRACE;
%left LBRACE;
%left RPAREN;
%left LPAREN;

%nonassoc SECOND_PRIOR;
%nonassoc FIRST_PRIOR;
%%

Program : {printMessage("prog");$$ = new Program();} Funcs {printMessage("exit from program");exitProgramRuntime();};
Funcs : %prec SECOND_PRIOR{printMessage("in funcs epsilon");$$ = new Funcs();} |
        FuncDecl Funcs %prec FIRST_PRIOR{printMessage("in funcs");$$ = new Funcs();};

FuncDecl: RetType ID LPAREN Formals RPAREN {printMessage("funcdecl");$$ = new FuncDecl(dynamic_cast<RetType*>($1),$2,dynamic_cast<Formals*>($4));} LBRACE OS {insertFunctionParameters(dynamic_cast<Formals*>($4));} Statements CS {exitProgramFuncs();} RBRACE;
RetType: Type{printMessage("ret type1");$$ = new RetType(dynamic_cast<Type*>($1));} | VOID{printMessage("ret type2");std::cout << $1;$$ = new RetType($1);};
Formals : {printMessage("formals1");$$ = new Formals();} | FormalsList{printMessage("formals2");$$ = new Formals(dynamic_cast<FormalsList*>($1));};
FormalsList : FormalDecl{printMessage("formalslist1");$$ = new FormalsList(dynamic_cast<FormalDecl*>($1));} |
FormalDecl COMMA FormalsList{printMessage("formalslist2");$$ = new FormalsList(dynamic_cast<FormalDecl*>($1), dynamic_cast<FormalsList*>($3));};
FormalDecl : Type ID{printMessage("formaldecl");$$ = new FormalDecl(dynamic_cast<Type*>($1), $2);};
Statements : Statement{printMessage("statements1");$$ = new Statements(dynamic_cast<Statement*>($1));} |
             Statements Statement{printMessage("statements2");$$ = new Statements(dynamic_cast<Statements*>($1), dynamic_cast<Statement*>($2));};
Statement : LBRACE OS Statements CS RBRACE {printMessage("statement1");$$ = new Statement(dynamic_cast<Statements*>($3));} |
            Type ID SC{printMessage("statement2");$$ = new Statement(dynamic_cast<Type*>($1),$2);} |
            Type ID ASSIGN Exp SC{printMessage("statement3");$$ = new Statement(dynamic_cast<Type*>($1),$2, dynamic_cast<Exp*>($4));} |
            ID ASSIGN Exp SC{printMessage("statement4");$$ = new Statement($1, dynamic_cast<Exp*>($3));} |
            Call SC{printMessage("statement5");$$ = new Statement(dynamic_cast<Call*>($1));} |
            RETURN SC{printMessage("statement6");$$ = new Statement("VOID");} |
            RETURN Exp SC{printMessage("statement7");$$ = new Statement(dynamic_cast<Exp*>($2));} |
            IF LPAREN SPECIAL RPAREN OS Statement %prec IF {printMessage("statement8");$$ = new Statement("if", dynamic_cast<Exp*>($3));closeCurrentScope();} |
            IF LPAREN SPECIAL RPAREN OS Statement ELSE {printMessage("statement9");$$ = new Statement("if else", dynamic_cast<Exp*>($3));closeCurrentScope();} OS Statement CS |
            WHILE LPAREN Exp RPAREN {printMessage("statement10");$$ = new Statement("while", dynamic_cast<Exp*>($3));enterLoop();} OS Statement CS{exitLoop();} |
            BREAK SC{printMessage("statement11");$$ = new Statement($1);} |
            CONTINUE SC{printMessage("statement12");$$ = new Statement($1);} |
            SWITCH LPAREN Exp RPAREN LBRACE OS CaseList {printMessage("statement13");$$ = new Statement(dynamic_cast<Exp*>($3),dynamic_cast<CaseList*>($6));} CS RBRACE;
Call : ID LPAREN ExpList RPAREN{printMessage("call1");$$ = new Call($1, dynamic_cast<ExpList*>($3));} |
       ID LPAREN RPAREN{printMessage("call2");$$ = new Call($1);};
ExpList : Exp{printMessage("explist1");$$ = new ExpList(dynamic_cast<Exp*>($1));} |
          Exp COMMA ExpList{printMessage("explist2");$$ = new ExpList(dynamic_cast<Exp*>($1), dynamic_cast<ExpList*>($3));};
Type : INT{printMessage("int");$$ = new Type($1);} |
       BYTE{printMessage("byte");$$ = new Type($1);} |
       BOOL{printMessage("bool");$$ = new Type($1);};
Exp : LPAREN Exp RPAREN{printMessage("exp1");$$ = new Exp(dynamic_cast<Exp*>($2));} |
      Exp ADD_SUB_BINOP Exp{printMessage("exp2");$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($3), "ADD_SUB_BINOP");} |
      Exp MUL_DIV_BINOP Exp{printMessage("exp3");$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($3), "MUL_DIV_BINOP");} |
      ID{printMessage("exp4");$$ = new Exp($1);} |
      Call{printMessage("exp5");$$ = new Exp(dynamic_cast<Call*>($1));} |
      NUM{printMessage("exp6");$$ = new Exp($1, "NUM");} |
      NUM B{printMessage("exp7");$$ = new Exp($1, "BYTE");} |
      STRING{printMessage("exp8");$$ = new Exp($1, "STRING");} |
      TRUE{printMessage("exp9");$$ = new Exp($1, "BOOL");} |
      FALSE{printMessage("exp10");$$ = new Exp($1, "BOOL");} |
      NOT Exp{printMessage("exp11");$$ = new Exp($1, dynamic_cast<Exp*>($2));} |
      Exp AND Exp{printMessage("exp12");$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($3), "AND");} |
      Exp OR Exp{printMessage("exp13");$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($3), "OR");} |
      Exp EQ_NEQ_RELOP Exp{printMessage("exp14");$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($3), "EQ_NEQ_RELOP");} |
      Exp REL_RELOP Exp{printMessage("exp15");$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($3), "REL_RELOP");};
CaseList : CaseDecl CaseList{printMessage("caselist1");$$ = new CaseList(dynamic_cast<CaseDecl*>($1),dynamic_cast<CaseList*>($2));} |
           CaseDecl{printMessage("caselist2");$$ = new CaseList(dynamic_cast<CaseDecl*>($1));} |
           DEFAULT COLON Statements{printMessage("caselist3");$$ = new CaseList(dynamic_cast<Statements*>($3));};
CaseDecl : CASE NUM COLON Statements{printMessage("casedecl1");$$ = new CaseDecl($2, dynamic_cast<Statements*>($4));};
SPECIAL : Exp {printMessage("special");$$ = new Exp(dynamic_cast<Exp*>($1),"STRING");};
OS : {printMessage("openscope");openNewScope();}
CS : {printMessage("closescope");closeCurrentScope();}

%%

/* Code section */

int main() {
    std::cout << "here" << std::endl;
    return yyparse();
}

int yyerror(const char * message) {
    output::errorSyn(yylineno);
    exit(0);
}